import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.secondaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightBlue80001,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 20,
        space: 20,
        color: appTheme.deepPurple100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray80001,
          fontSize: 18.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.87),
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.87),
          fontSize: 56.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w300,
        ),
        displayMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 48.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 28.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.53),
          fontSize: 10.fSize,
          fontFamily: 'Abhaya Libre Medium',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.blueGray600,
          fontSize: 9.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 18.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 15.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFEFEFEF),
    primaryContainer: Color(0XFF553EA5),
    secondaryContainer: Color(0XFFF9F9F9),

    // Error colors
    errorContainer: Color(0XFF2EB2FF),
    onError: Color(0XFFD4F4ED),
    onErrorContainer: Color(0XFF181818),

    // On colors(text colors)
    onPrimary: Color(0XFF272B30),
    onPrimaryContainer: Color(0XFF110C26),
    onSecondaryContainer: Color(0XFF2C2B46),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFFFD88D);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFCAD2FF);
  Color get blue50 => Color(0XFFE9F6FC);
  Color get blueA100 => Color(0XFF86B1F2);
  Color get blueA400 => Color(0XFF1977F3);

  // BlueAf
  Color get blueA4000f => Color(0X0F3A71FE);

  // BlueGray
  Color get blueGray100 => Color(0XFFD1D3D4);
  Color get blueGray200 => Color(0XFFBEC2CE);
  Color get blueGray400 => Color(0XFF888B96);
  Color get blueGray40001 => Color(0XFF8C8C8C);
  Color get blueGray50 => Color(0XFFEFEFF4);
  Color get blueGray500 => Color(0XFF666B89);
  Color get blueGray50001 => Color(0XFF6A9B7E);
  Color get blueGray5001 => Color(0XFFECF8F1);
  Color get blueGray600 => Color(0XFF636974);
  Color get blueGray700 => Color(0XFF535662);
  Color get blueGray800 => Color(0XFF40405D);
  Color get blueGray80001 => Color(0XFF363F4F);
  Color get blueGray80002 => Color(0XFF424255);
  Color get blueGray80014 => Color(0X14253853);
  Color get blueGray900 => Color(0XFF172B4D);
  Color get blueGray90001 => Color(0XFF32383E);
  Color get blueGray90002 => Color(0XFF252842);
  Color get blueGray90003 => Color(0XFF373737);
  Color get blueGray90004 => Color(0XFF2F3643);
  Color get blueGray90005 => Color(0XFF24273B);
  Color get blueGray90006 => Color(0XFF242A37);

  // BlueGrayc
  Color get blueGray4000c => Color(0X0C8484A2);

  // Cyan
  Color get cyan300 => Color(0XFF3FD9D7);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFFFBC99);
  Color get deepOrange300 => Color(0XFFFB9450);
  Color get deepOrange500 => Color(0XFFFE582A);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFCABDFE);
  Color get deepPurple800 => Color(0XFF422F87);
  Color get deepPurpleA200 => Color(0XFF6759FF);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF1F2F6);
  Color get gray10002 => Color(0XFFF7F7F7);
  Color get gray10003 => Color(0XFFF5F5F5);
  Color get gray10004 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray300 => Color(0XFFE2E2E2);
  Color get gray300A9 => Color(0XA9DBDBDB);
  Color get gray400 => Color(0XFFB0B0B0);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFFBFBFB);
  Color get gray500 => Color(0XFF9A9FA5);
  Color get gray50001 => Color(0XFF9B9E9F);
  Color get gray5001 => Color(0XFFFAFAFA);
  Color get gray5002 => Color(0XFFFCFCFC);
  Color get gray5003 => Color(0XFFF7F8FA);
  Color get gray600 => Color(0XFF7B7B7B);
  Color get gray60001 => Color(0XFF6F767D);
  Color get gray60002 => Color(0XFF6F767E);
  Color get gray800 => Color(0XFF393E32);
  Color get gray900 => Color(0XFF1A1D1F);
  Color get gray90001 => Color(0XFF191A2C);

  // Green
  Color get green300 => Color(0XFF7EC09B);
  Color get green50 => Color(0XFFEAF6EF);
  Color get green500 => Color(0XFF4FDE4C);
  Color get greenA100 => Color(0XFFB5EACD);

  // Indigo
  Color get indigo50 => Color(0XFFE4E2FF);
  Color get indigo600 => Color(0XFF47439F);

  // LightBlue
  Color get lightBlue100 => Color(0XFFB0E5FC);
  Color get lightBlue800 => Color(0XFF0275BC);
  Color get lightBlue80001 => Color(0XFF0275BB);

  // Orange
  Color get orange300 => Color(0XFFFCC14A);
  Color get orange30001 => Color(0XFFFFC454);
  Color get orange400 => Color(0XFFFEA829);
  Color get orangeA200 => Color(0XFFFB944C);

  // Pink
  Color get pinkA100 => Color(0XFFF568C4);

  // Purple
  Color get purple50 => Color(0XFFF1D4F4);
  Color get purpleA10033 => Color(0X33EF9EF6);

  // Red
  Color get red500 => Color(0XFFEA4335);
  Color get redA200 => Color(0XFFFF5959);

  // Teal
  Color get teal100 => Color(0XFFB5E4CA);
  Color get teal300 => Color(0XFF57A4C3);
  Color get teal50 => Color(0XFFD5F4ED);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
